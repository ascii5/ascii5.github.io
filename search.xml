<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式概述</title>
      <link href="/2023/02/19/she-ji-mo-shi-gai-shu/"/>
      <url>/2023/02/19/she-ji-mo-shi-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式概述及常见设计模式"><a href="#设计模式概述及常见设计模式" class="headerlink" title="设计模式概述及常见设计模式"></a>设计模式概述及常见设计模式</h1><h2 id="一，设计模式目的"><a href="#一，设计模式目的" class="headerlink" title="一，设计模式目的"></a>一，设计模式目的</h2><p>​    <strong>高内聚，低耦合</strong></p><p>​    提高代码的复用性，将变化和稳定隔离开</p><h2 id="二，设计模式原则"><a href="#二，设计模式原则" class="headerlink" title="二，设计模式原则"></a>二，设计模式原则</h2><h3 id="1，八大原则"><a href="#1，八大原则" class="headerlink" title="1，八大原则"></a>1，八大原则</h3><ul><li>依赖倒置原则</li><li>开放封闭原则</li><li>单一职责原则</li><li>替换原则</li><li>接口隔离原则</li><li>优先使用组合而不是继承</li><li>封装变化点</li><li>针对接口编程</li></ul><h3 id="2，依赖倒置原则"><a href="#2，依赖倒置原则" class="headerlink" title="2，依赖倒置原则"></a>2，依赖倒置原则</h3><blockquote><p>变化的代码应该依赖稳定的代码，具体的代码应该依赖抽象的代码</p></blockquote><h3 id="3，开放封闭原则"><a href="#3，开放封闭原则" class="headerlink" title="3，开放封闭原则"></a>3，开放封闭原则</h3><blockquote><p>源代码应该做到对扩展开放，对改变封闭</p></blockquote><h3 id="4，单一职责原则"><a href="#4，单一职责原则" class="headerlink" title="4，单一职责原则"></a>4，单一职责原则</h3><blockquote><p>类的职责应该划分清楚，单一且明确</p></blockquote><h3 id="5，替换原则"><a href="#5，替换原则" class="headerlink" title="5，替换原则"></a>5，替换原则</h3><blockquote><p>子类可以替换掉父类的作用</p></blockquote><h3 id="6，接口隔离原则"><a href="#6，接口隔离原则" class="headerlink" title="6，接口隔离原则"></a>6，接口隔离原则</h3><blockquote><p>提供的接口应当简洁完整，避免累赘</p></blockquote><h3 id="7，优先使用组合而不是继承"><a href="#7，优先使用组合而不是继承" class="headerlink" title="7，优先使用组合而不是继承"></a>7，优先使用组合而不是继承</h3><blockquote><p>组合优于继承，更加灵活，耦合度更低</p></blockquote><h3 id="8，封装变化点"><a href="#8，封装变化点" class="headerlink" title="8，封装变化点"></a>8，封装变化点</h3><blockquote><p>将变化隔离，使得一个类的变化不会影响到其他的类</p></blockquote><h3 id="9，针对接口编程"><a href="#9，针对接口编程" class="headerlink" title="9，针对接口编程"></a>9，针对接口编程</h3><blockquote><p>针对接口之间的标准化调用编程</p></blockquote><h2 id="三，单例模式"><a href="#三，单例模式" class="headerlink" title="三，单例模式"></a>三，单例模式</h2><h3 id="1，业务场景"><a href="#1，业务场景" class="headerlink" title="1，业务场景"></a>1，业务场景</h3><p>​    当某个类要求保证全局只有一个对象</p><h3 id="2，代码实现"><a href="#2，代码实现" class="headerlink" title="2，代码实现"></a>2，代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//singleton模式(单例模式)</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton<span class="token operator">&amp;</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> m_instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Singleton<span class="token operator">*</span> Singleton<span class="token double-colon punctuation">::</span>m_instance<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token comment">//线程非安全版本</span>Singleton<span class="token operator">*</span> <span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_instance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m_instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//线程安全版本，但锁的代价过高</span>Singleton<span class="token operator">*</span> <span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Lock lock<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_instance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m_instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//双检查锁，但由于内存读写reorder不安全</span>Singleton<span class="token operator">*</span> <span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_instance<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Lock lock<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_instance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            m_instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m_instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//C++ 11版本之后的跨平台实现 (volatile)</span>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span>Singleton<span class="token operator">*</span><span class="token operator">&gt;</span> Singleton<span class="token double-colon punctuation">::</span>m_instance<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>mutex Singleton<span class="token double-colon punctuation">::</span>m_mutex<span class="token punctuation">;</span>Singleton<span class="token operator">*</span> <span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Singleton<span class="token operator">*</span> tmp <span class="token operator">=</span> m_instance<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_relaxed<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token function">atomic_thread_fence</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_acquire<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取内存fence</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>m_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> m_instance<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_relaxed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp <span class="token operator">=</span> <span class="token keyword">new</span> Singleton<span class="token punctuation">;</span>            std<span class="token double-colon punctuation">::</span><span class="token function">atomic_thread_fence</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>memory_order_release<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放内存fence</span>            m_instance<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>memory_order_relaxed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四，观察者模式"><a href="#四，观察者模式" class="headerlink" title="四，观察者模式"></a>四，观察者模式</h2><h3 id="1，业务场景-1"><a href="#1，业务场景-1" class="headerlink" title="1，业务场景"></a>1，业务场景</h3><p>​    当一个类发生变化时，其他与之相关联的一系列类也要做出反应，例如qt里的信号和槽</p><h3 id="2，代码实现-1"><a href="#2，代码实现-1" class="headerlink" title="2，代码实现"></a>2，代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//observer模式(观察者模式)</span><span class="token keyword">class</span> <span class="token class-name">observer</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">observer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">subject</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>observer<span class="token operator">*</span><span class="token operator">&gt;</span>observers<span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token operator">*</span> observer<span class="token punctuation">)</span><span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>observers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">notifyOfAll</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">concreteSubject</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">subject</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">notifyOfAll</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"subject 自身状态开始变化"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> obs<span class="token operator">:</span>observers<span class="token punctuation">)</span><span class="token punctuation">{</span>            obs<span class="token operator">-&gt;</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">observer1</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">observer</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"observer1 is already"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">observer2</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">observer</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"observer2 is already"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五，代理模式"><a href="#五，代理模式" class="headerlink" title="五，代理模式"></a>五，代理模式</h2><h3 id="1，业务场景-2"><a href="#1，业务场景-2" class="headerlink" title="1，业务场景"></a>1，业务场景</h3><p>​    由于安全，性能，或者分布式等原因考虑的时候，一个类无法直接访问另外一个类，需要间接代理</p><h3 id="2，代码实现-2"><a href="#2，代码实现-2" class="headerlink" title="2，代码实现"></a>2，代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//proxy模式(代理模式)</span><span class="token keyword">class</span> <span class="token class-name">ISubject</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">ISubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">subject</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">subject</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"subject 访问成功"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">proxySubject</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ISubject</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    subject<span class="token operator">*</span> mSubject<span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mSubject <span class="token operator">=</span> <span class="token keyword">new</span> subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">client</span><span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>ISubject<span class="token operator">*</span> mSubject<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mSubject <span class="token operator">=</span> <span class="token keyword">new</span> proxySubject<span class="token punctuation">;</span>        mSubject <span class="token operator">-&gt;</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    client c<span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六，策略模式"><a href="#六，策略模式" class="headerlink" title="六，策略模式"></a>六，策略模式</h2><h3 id="1，业务场景-3"><a href="#1，业务场景-3" class="headerlink" title="1，业务场景"></a>1，业务场景</h3><p>​    当一个类的算法复杂且容易变化时，将算法单独封装和类本身解耦合常用于消除if else语句</p><h3 id="2，代码实现-3"><a href="#2，代码实现-3" class="headerlink" title="2，代码实现"></a>2，代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//strategy模式(策略模式)</span><span class="token keyword">class</span> <span class="token class-name">TaxStrategy</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">TaxStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CNTax</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TaxStrategy</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"这是 CNTax"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">USTax</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TaxStrategy</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"这是 USTax"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DETax</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TaxStrategy</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"这是 DETax"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FRTax</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TaxStrategy</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"这是 FRTax"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SalesOrder</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    TaxStrategy<span class="token operator">*</span> mTaxStrategy<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">SalesOrder</span><span class="token punctuation">(</span>TaxStrategy<span class="token operator">*</span> TaxStrategy<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">mTaxStrategy</span><span class="token punctuation">(</span>TaxStrategy<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">SalesOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">CalculateTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mTaxStrategy<span class="token operator">-&gt;</span><span class="token function">Calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TaxStrategy<span class="token operator">*</span> strategy <span class="token operator">=</span> <span class="token keyword">new</span> CNTax<span class="token punctuation">;</span>    SalesOrder<span class="token operator">*</span> salesOreder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">SalesOrder</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>    salesOreder <span class="token operator">-&gt;</span> <span class="token function">CalculateTax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七，装饰器模式"><a href="#七，装饰器模式" class="headerlink" title="七，装饰器模式"></a>七，装饰器模式</h2><h3 id="1，业务场景-4"><a href="#1，业务场景-4" class="headerlink" title="1，业务场景"></a>1，业务场景</h3><p>​    当使用继承的产生的子类数量过于多时，就应该考虑更为灵活的组合来为其动态附着功能</p><h3 id="2，代码实现-4"><a href="#2，代码实现-4" class="headerlink" title="2，代码实现"></a>2，代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//decorator模式(装饰器模式)</span><span class="token comment">//业务操作</span><span class="token keyword">class</span> <span class="token class-name">Stream</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//主体类</span><span class="token keyword">class</span> <span class="token class-name">FileStream</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Stream</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//读文件流</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//定位文件流</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//写文件流</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">NetworkStream</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Stream</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//读网络流</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//定位网络流</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//写网络流</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MemoryStream</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Stream</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//读内存流</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//定位内存流</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span><span class="token keyword">char</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//写内存流</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//扩展操作</span><span class="token comment">// 由于两个子类有相同的成员Stream*，所以这个成员要往上提</span>DecoratorStream<span class="token operator">:</span> <span class="token keyword">public</span> Stream<span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    Stream<span class="token operator">*</span> stream<span class="token punctuation">;</span><span class="token comment">//...</span>        <span class="token function">DecoratorStream</span><span class="token punctuation">(</span>Stream <span class="token operator">*</span> stm<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">stream</span><span class="token punctuation">(</span>stm<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CryptoStream</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">DecoratorStream</span></span> <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CryptoStream</span><span class="token punctuation">(</span>Stream<span class="token operator">*</span> stm<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">DecoratorStream</span><span class="token punctuation">(</span>stm<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>            <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment">//额外的加密操作...</span>        stream<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读文件流</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//额外的加密操作...</span>        stream<span class="token double-colon punctuation">::</span><span class="token function">Seek</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定位文件流</span>        <span class="token comment">//额外的加密操作...</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span>byte data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//额外的加密操作...</span>        stream<span class="token double-colon punctuation">::</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写文件流</span>        <span class="token comment">//额外的加密操作...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BufferedStream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">DecoratorStream</span></span><span class="token punctuation">{</span>        Stream<span class="token operator">*</span> stream<span class="token punctuation">;</span><span class="token comment">//...</span>    <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">BufferedStream</span><span class="token punctuation">(</span>Stream<span class="token operator">*</span> stm<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">DecoratorStream</span><span class="token punctuation">(</span>stm<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">char</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment">//额外的缓存操作...</span>        stream<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读文件流</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Seek</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//额外的缓存操作...</span>        stream<span class="token double-colon punctuation">::</span><span class="token function">Seek</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定位文件流</span>        <span class="token comment">//额外的缓存操作...</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Write</span><span class="token punctuation">(</span>byte data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//额外的缓存操作...</span>        stream<span class="token double-colon punctuation">::</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写文件流</span>        <span class="token comment">//额外的缓存操作...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//运行时装配</span>    Stream<span class="token operator">*</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">FileStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CryptoStream<span class="token operator">*</span> s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">CryptoStream</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    BufferedStream<span class="token operator">*</span> s3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">BufferedStream</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    BufferedStream<span class="token operator">*</span> s4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">BufferedStream</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八，工厂模式"><a href="#八，工厂模式" class="headerlink" title="八，工厂模式"></a>八，工厂模式</h2><h3 id="1，业务场景-5"><a href="#1，业务场景-5" class="headerlink" title="1，业务场景"></a>1，业务场景</h3><p>​    当在一个类中new一个另外的对象会导致对该对象依赖，通过工厂模式绕开new,使其依赖于抽象类</p><h3 id="2，代码实现-5"><a href="#2，代码实现-5" class="headerlink" title="2，代码实现"></a>2，代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//factory模式(工厂模式)</span><span class="token comment">//抽象类</span><span class="token keyword">class</span> <span class="token class-name">ISplitter</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">ISplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//工厂基类</span><span class="token keyword">class</span> <span class="token class-name">SplitterFactory</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> ISplitter<span class="token operator">*</span> <span class="token function">CreateSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">SplitterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//具体类</span><span class="token keyword">class</span> <span class="token class-name">BinarySplitter</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ISplitter</span></span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TxtSplitter</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ISplitter</span></span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PictureSplitter</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ISplitter</span></span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">VideoSplitter</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ISplitter</span></span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//具体工厂</span><span class="token keyword">class</span> <span class="token class-name">BinarySplitterFactory</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">SplitterFactory</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> ISplitter<span class="token operator">*</span> <span class="token function">CreateSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">BinarySplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TxtSplitterFactory</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">SplitterFactory</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> ISplitter<span class="token operator">*</span> <span class="token function">CreateSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">TxtSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PictureSplitterFactory</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">SplitterFactory</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> ISplitter<span class="token operator">*</span> <span class="token function">CreateSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">PictureSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">VideoSplitterFactory</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">SplitterFactory</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> ISplitter<span class="token operator">*</span> <span class="token function">CreateSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">VideoSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MainForm</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Form</span></span><span class="token punctuation">{</span>    SplitterFactory<span class="token operator">*</span>  factory<span class="token punctuation">;</span><span class="token comment">//工厂</span><span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">MainForm</span><span class="token punctuation">(</span>SplitterFactory<span class="token operator">*</span>  factory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-&gt;</span>factory<span class="token operator">=</span>factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Button1_Click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ISplitter <span class="token operator">*</span> splitter<span class="token operator">=</span>            factory<span class="token operator">-&gt;</span><span class="token function">CreateSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//多态new</span>                splitter<span class="token operator">-&gt;</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九，抽象工厂模式"><a href="#九，抽象工厂模式" class="headerlink" title="九，抽象工厂模式"></a>九，抽象工厂模式</h2><h3 id="1，业务场景-6"><a href="#1，业务场景-6" class="headerlink" title="1，业务场景"></a>1，业务场景</h3><p>​    绕开new进行一系列相互依赖的对象的创建</p><h3 id="2，代码实现-6"><a href="#2，代码实现-6" class="headerlink" title="2，代码实现"></a>2，代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//abstractFactory模式(抽象工厂模式)</span><span class="token comment">//数据库访问有关的基类</span><span class="token keyword">class</span> <span class="token class-name">IDBConnection</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IDBCommand</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IDataReader</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IDBFactory</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> IDBConnection<span class="token operator">*</span> <span class="token function">CreateDBConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> IDBCommand<span class="token operator">*</span> <span class="token function">CreateDBCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> IDataReader<span class="token operator">*</span> <span class="token function">CreateDataReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//支持SQL Server</span><span class="token keyword">class</span> <span class="token class-name">SqlConnection</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IDBConnection</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SqlCommand</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IDBCommand</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SqlDataReader</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IDataReader</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SqlDBFactory</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IDBFactory</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> IDBConnection<span class="token operator">*</span> <span class="token function">CreateDBConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> IDBCommand<span class="token operator">*</span> <span class="token function">CreateDBCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> IDataReader<span class="token operator">*</span> <span class="token function">CreateDataReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//支持Oracle</span><span class="token keyword">class</span> <span class="token class-name">OracleConnection</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IDBConnection</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OracleCommand</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IDBCommand</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OracleDataReader</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IDataReader</span></span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EmployeeDAO</span><span class="token punctuation">{</span>    IDBFactory<span class="token operator">*</span> dbFactory<span class="token punctuation">;</span>    <span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>EmployeeDO<span class="token operator">&gt;</span> <span class="token function">GetEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        IDBConnection<span class="token operator">*</span> connection <span class="token operator">=</span>            dbFactory<span class="token operator">-&gt;</span><span class="token function">CreateDBConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token operator">-&gt;</span><span class="token function">ConnectionString</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IDBCommand<span class="token operator">*</span> command <span class="token operator">=</span>            dbFactory<span class="token operator">-&gt;</span><span class="token function">CreateDBCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token operator">-&gt;</span><span class="token function">CommandText</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token operator">-&gt;</span><span class="token function">SetConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关联性</span>        IDBDataReader<span class="token operator">*</span> reader <span class="token operator">=</span> command<span class="token operator">-&gt;</span><span class="token function">ExecuteReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关联性</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token operator">-&gt;</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十，命令模式"><a href="#十，命令模式" class="headerlink" title="十，命令模式"></a>十，命令模式</h2><h3 id="1，业务场景-7"><a href="#1，业务场景-7" class="headerlink" title="1，业务场景"></a>1，业务场景</h3><p>​    需要对行为进行”记录、撤销、事务“时，行为的请求和实现应该松耦合</p><h3 id="2，代码实现-7"><a href="#2，代码实现-7" class="headerlink" title="2，代码实现"></a>2，代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//commmand模式(命令模式)</span><span class="token keyword">class</span> <span class="token class-name">Command</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteCommand1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Command</span></span><span class="token punctuation">{</span>    string arg<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ConcreteCommand1</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">arg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span> <span class="token string">"#1 process..."</span><span class="token operator">&lt;&lt;</span>arg<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteCommand2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Command</span></span><span class="token punctuation">{</span>    string arg<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ConcreteCommand2</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">arg</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span> <span class="token string">"#2 process..."</span><span class="token operator">&lt;&lt;</span>arg<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">class</span> <span class="token class-name">MacroCommand</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Command</span></span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>Command<span class="token operator">*</span><span class="token operator">&gt;</span> commands<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">addCommand</span><span class="token punctuation">(</span>Command <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> commands<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>c <span class="token operator">:</span> commands<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            c<span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ConcreteCommand1 <span class="token function">command1</span><span class="token punctuation">(</span><span class="token string">"Arg ###"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ConcreteCommand2 <span class="token function">command2</span><span class="token punctuation">(</span> <span class="token string">"Arg $$$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MacroCommand macro<span class="token punctuation">;</span>    macro<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>command1<span class="token punctuation">)</span><span class="token punctuation">;</span>    macro<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>command2<span class="token punctuation">)</span><span class="token punctuation">;</span>        macro<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一，责任链模式"><a href="#十一，责任链模式" class="headerlink" title="十一，责任链模式"></a>十一，责任链模式</h2><h3 id="1，业务场景-8"><a href="#1，业务场景-8" class="headerlink" title="1，业务场景"></a>1，业务场景</h3><p>​    一个请求可能被多个对象处理，需要动态的指定接收者</p><h3 id="2，代码实现-8"><a href="#2，代码实现-8" class="headerlink" title="2，代码实现"></a>2，代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">RequestType</span><span class="token punctuation">{</span>    REQ_HANDLER1<span class="token punctuation">,</span>    REQ_HANDLER2<span class="token punctuation">,</span>    REQ_HANDLER3<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Reqest</span><span class="token punctuation">{</span>    string description<span class="token punctuation">;</span>    RequestType reqType<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Reqest</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span> desc<span class="token punctuation">,</span> RequestType type<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">description</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">reqType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    RequestType <span class="token function">getReqType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> reqType<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">const</span> string<span class="token operator">&amp;</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> description<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ChainHandler</span><span class="token punctuation">{</span>        ChainHandler <span class="token operator">*</span>nextChain<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sendReqestToNextHandler</span><span class="token punctuation">(</span><span class="token keyword">const</span> Reqest <span class="token operator">&amp;</span> req<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChain <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            nextChain<span class="token operator">-&gt;</span><span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">canHandleRequest</span><span class="token punctuation">(</span><span class="token keyword">const</span> Reqest <span class="token operator">&amp;</span> req<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token keyword">const</span> Reqest <span class="token operator">&amp;</span> req<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ChainHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> nextChain <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setNextChain</span><span class="token punctuation">(</span>ChainHandler <span class="token operator">*</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span> nextChain <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token punctuation">}</span>           <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">const</span> Reqest <span class="token operator">&amp;</span> req<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canHandleRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">processRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">sendReqestToNextHandler</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Handler1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ChainHandler</span></span><span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">canHandleRequest</span><span class="token punctuation">(</span><span class="token keyword">const</span> Reqest <span class="token operator">&amp;</span> req<span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> req<span class="token punctuation">.</span><span class="token function">getReqType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RequestType<span class="token double-colon punctuation">::</span>REQ_HANDLER1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token keyword">const</span> Reqest <span class="token operator">&amp;</span> req<span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Handler1 is handle reqest: "</span> <span class="token operator">&lt;&lt;</span> req<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">Handler2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ChainHandler</span></span><span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">canHandleRequest</span><span class="token punctuation">(</span><span class="token keyword">const</span> Reqest <span class="token operator">&amp;</span> req<span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> req<span class="token punctuation">.</span><span class="token function">getReqType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RequestType<span class="token double-colon punctuation">::</span>REQ_HANDLER2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token keyword">const</span> Reqest <span class="token operator">&amp;</span> req<span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Handler2 is handle reqest: "</span> <span class="token operator">&lt;&lt;</span> req<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Handler3</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ChainHandler</span></span><span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">canHandleRequest</span><span class="token punctuation">(</span><span class="token keyword">const</span> Reqest <span class="token operator">&amp;</span> req<span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> req<span class="token punctuation">.</span><span class="token function">getReqType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RequestType<span class="token double-colon punctuation">::</span>REQ_HANDLER3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token keyword">const</span> Reqest <span class="token operator">&amp;</span> req<span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Handler3 is handle reqest: "</span> <span class="token operator">&lt;&lt;</span> req<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Handler1 h1<span class="token punctuation">;</span>    Handler2 h2<span class="token punctuation">;</span>    Handler3 h3<span class="token punctuation">;</span>    h1<span class="token punctuation">.</span><span class="token function">setNextChain</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>    h2<span class="token punctuation">.</span><span class="token function">setNextChain</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h3<span class="token punctuation">)</span><span class="token punctuation">;</span>        Reqest <span class="token function">req</span><span class="token punctuation">(</span><span class="token string">"process task ... "</span><span class="token punctuation">,</span> RequestType<span class="token double-colon punctuation">::</span>REQ_HANDLER3<span class="token punctuation">)</span><span class="token punctuation">;</span>    h1<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2023/02/18/test/"/>
      <url>/2023/02/18/test/</url>
      
        <content type="html"><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/18/hello-world/"/>
      <url>/2023/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
